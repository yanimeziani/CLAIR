name: SSL Certificate Update - Add LUCIDE Subdomain

on:
  workflow_dispatch:
    inputs:
      force_renewal:
        description: 'Force certificate renewal even if not needed'
        required: false
        default: 'false'
        type: boolean

jobs:
  update-ssl:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v4
    
    - name: Update SSL certificate to include both domains
      run: |
        echo "üîê Updating SSL certificate to include lucide.dev.meziani.org..."
        
        # Check current certificate status
        echo "üìã Current certificate status:"
        docker run --rm -v clair_certbot_data:/etc/letsencrypt certbot/certbot certificates
        
        # Ensure we're using HTTP-only configuration for certificate generation
        echo "üåê Switching to HTTP-only configuration for certificate update..."
        cd /actions-runner/_work/CLAIR/CLAIR
        
        # Disable SSL config temporarily
        if [ -f "nginx/conf.d/irielle-ssl.conf" ]; then
          mv nginx/conf.d/irielle-ssl.conf nginx/conf.d/irielle-ssl.conf.disabled
        fi
        
        # Enable HTTP-only config
        if [ -f "nginx/conf.d/irielle-http-only.conf.disabled" ]; then
          mv nginx/conf.d/irielle-http-only.conf.disabled nginx/conf.d/irielle-http-only.conf
        fi
        
        # Restart nginx with HTTP-only config
        docker-compose restart nginx
        sleep 15
        
        # Test both domains are accessible via HTTP
        echo "üß™ Testing HTTP access for both domains..."
        if curl -f http://dev.meziani.org >/dev/null 2>&1; then
          echo "‚úÖ dev.meziani.org is accessible via HTTP"
        else
          echo "‚ùå dev.meziani.org is not accessible via HTTP"
          exit 1
        fi
        
        if curl -f http://lucide.dev.meziani.org >/dev/null 2>&1; then
          echo "‚úÖ lucide.dev.meziani.org is accessible via HTTP"
        else
          echo "‚ùå lucide.dev.meziani.org is not accessible via HTTP"
          exit 1
        fi
        
        # Generate new certificate with both domains
        echo "üöÄ Generating new SSL certificate for both domains..."
        FORCE_FLAG=""
        if [ "${{ github.event.inputs.force_renewal }}" == "true" ]; then
          FORCE_FLAG="--force-renewal"
        fi
        
        docker-compose run --rm certbot certonly \
          --webroot \
          --webroot-path=/var/www/certbot \
          --email support@meziani.org \
          --agree-tos \
          --no-eff-email \
          $FORCE_FLAG \
          -d dev.meziani.org \
          -d lucide.dev.meziani.org
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ SSL certificate generated successfully for both domains"
          
          # Verify certificate includes both domains
          echo "üîç Verifying certificate contains both domains..."
          docker run --rm -v clair_certbot_data:/etc/letsencrypt alpine \
            openssl x509 -in /etc/letsencrypt/live/dev.meziani.org/fullchain.pem -text -noout | grep -E "DNS:" || echo "Certificate info check failed"
          
          echo "üìã Updated certificate status:"
          docker run --rm -v clair_certbot_data:/etc/letsencrypt certbot/certbot certificates
          
        else
          echo "‚ùå SSL certificate generation failed"
          exit 1
        fi
        
    - name: Switch to SSL configuration
      run: |
        echo "üîÑ Switching to SSL configuration..."
        cd /actions-runner/_work/CLAIR/CLAIR
        
        # Create .env.production file if it doesn't exist
        if [ ! -f ".env.production" ]; then
          echo "üìù Creating .env.production file..."
          cat > .env.production << 'EOF'
NODE_ENV=production
MONGODB_URI=mongodb://admin:securepassword@mongodb:27017/irielle?authSource=admin
AI_BACKEND_URL=http://ai-backend:8000
NEXTAUTH_SECRET=your-nextauth-secret-key-here
NEXTAUTH_URL=https://dev.meziani.org
EOF
        fi
        
        # Disable HTTP-only config
        if [ -f "nginx/conf.d/irielle-http-only.conf" ]; then
          mv nginx/conf.d/irielle-http-only.conf nginx/conf.d/irielle-http-only.conf.disabled
        fi
        
        # Enable SSL config
        if [ -f "nginx/conf.d/irielle-ssl.conf.disabled" ]; then
          mv nginx/conf.d/irielle-ssl.conf.disabled nginx/conf.d/irielle-ssl.conf
        fi
        
        # Test nginx configuration
        echo "üß™ Testing nginx configuration..."
        if docker-compose exec nginx nginx -t 2>/dev/null; then
          echo "‚úÖ Nginx configuration is valid"
        else
          echo "‚ùå Nginx configuration is invalid, reverting..."
          # Revert to HTTP-only config
          if [ -f "nginx/conf.d/irielle-ssl.conf" ]; then
            mv nginx/conf.d/irielle-ssl.conf nginx/conf.d/irielle-ssl.conf.disabled
          fi
          if [ -f "nginx/conf.d/irielle-http-only.conf.disabled" ]; then
            mv nginx/conf.d/irielle-http-only.conf.disabled nginx/conf.d/irielle-http-only.conf
          fi
          exit 1
        fi
        
        # Restart nginx with SSL configuration
        docker-compose restart nginx
        sleep 20
        
    - name: Test SSL functionality
      run: |
        echo "üîç Testing SSL functionality for both domains..."
        
        # Test HTTPS for main domain
        echo "üß™ Testing HTTPS for dev.meziani.org..."
        for i in {1..5}; do
          if curl -f -k https://dev.meziani.org >/dev/null 2>&1; then
            echo "‚úÖ dev.meziani.org HTTPS is working!"
            MAIN_SSL_OK=true
            break
          else
            echo "‚è≥ HTTPS test for dev.meziani.org attempt $i failed, retrying..."
            sleep 10
          fi
        done
        
        # Test HTTPS for subdomain
        echo "üß™ Testing HTTPS for lucide.dev.meziani.org..."
        for i in {1..5}; do
          if curl -f -k https://lucide.dev.meziani.org >/dev/null 2>&1; then
            echo "‚úÖ lucide.dev.meziani.org HTTPS is working!"
            SUBDOMAIN_SSL_OK=true
            break
          else
            echo "‚è≥ HTTPS test for lucide.dev.meziani.org attempt $i failed, retrying..."
            sleep 10
          fi
        done
        
        # Test HTTP redirects
        echo "üß™ Testing HTTP to HTTPS redirects..."
        if curl -s -o /dev/null -w "%{http_code}" http://dev.meziani.org | grep -q "30[12]"; then
          echo "‚úÖ HTTP redirect working for dev.meziani.org"
        else
          echo "‚ö†Ô∏è HTTP redirect might not be working for dev.meziani.org"
        fi
        
        if curl -s -o /dev/null -w "%{http_code}" http://lucide.dev.meziani.org | grep -q "30[12]"; then
          echo "‚úÖ HTTP redirect working for lucide.dev.meziani.org"
        else
          echo "‚ö†Ô∏è HTTP redirect might not be working for lucide.dev.meziani.org"
        fi
        
        # Final status report
        echo ""
        echo "üéâ ============================================="
        echo "üéâ SSL UPDATE COMPLETED!"
        echo "üéâ ============================================="
        echo ""
        echo "üîê SSL STATUS:"
        if [ "$MAIN_SSL_OK" == "true" ]; then
          echo "   ‚úÖ https://dev.meziani.org - SSL Working"
        else
          echo "   ‚ùå https://dev.meziani.org - SSL Failed"
        fi
        
        if [ "$SUBDOMAIN_SSL_OK" == "true" ]; then
          echo "   ‚úÖ https://lucide.dev.meziani.org - SSL Working"
        else
          echo "   ‚ùå https://lucide.dev.meziani.org - SSL Failed"
        fi
        
        echo ""
        echo "üîí Certificate covers both domains:"
        docker run --rm -v clair_certbot_data:/etc/letsencrypt certbot/certbot certificates
        echo "============================================="
        
        # Exit with error if either domain failed
        if [ "$MAIN_SSL_OK" != "true" ] || [ "$SUBDOMAIN_SSL_OK" != "true" ]; then
          echo "‚ùå SSL setup failed for one or more domains"
          exit 1
        fi