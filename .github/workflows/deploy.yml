name: Deploy CLAIR Healthcare System with LUCIDE Analytics

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          clair-app/package-lock.json
          lucide-analytics/package-lock.json
    
    - name: Generate cache key
      id: cache-key
      run: echo "key=build-${{ github.sha }}" >> $GITHUB_OUTPUT
    
    - name: Check for cached builds
      id: cache-check
      uses: actions/cache@v3
      with:
        path: |
          clair-app/.next
          lucide-analytics/.next
          clair-app/node_modules
          lucide-analytics/node_modules
        key: build-${{ github.sha }}
        restore-keys: |
          build-${{ github.sha }}
    
    - name: Install CLAIR dependencies
      if: steps.cache-check.outputs.cache-hit != 'true'
      working-directory: ./clair-app
      run: npm ci
    
    - name: Install LUCIDE dependencies
      if: steps.cache-check.outputs.cache-hit != 'true'
      working-directory: ./lucide-analytics
      run: npm ci
    
    - name: Run CLAIR linter
      if: steps.cache-check.outputs.cache-hit != 'true'
      working-directory: ./clair-app
      run: npm run lint || true
    
    - name: Run LUCIDE linter
      if: steps.cache-check.outputs.cache-hit != 'true'
      working-directory: ./lucide-analytics
      run: npm run lint || true
    
    - name: Build CLAIR application
      if: steps.cache-check.outputs.cache-hit != 'true'
      working-directory: ./clair-app
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        AI_BACKEND_URL: http://localhost:8001
      run: npm run build
    
    - name: Build LUCIDE application
      if: steps.cache-check.outputs.cache-hit != 'true'
      working-directory: ./lucide-analytics
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nextjs-builds
        path: |
          clair-app/.next
          lucide-analytics/.next
        retention-days: 1

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Clean workspace
      run: |
        rm -rf .git || true
        rm -rf * || true
        rm -rf .[!.]* || true
        git config --global --add safe.directory ${{ github.workspace }}
    
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 1
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: nextjs-builds
        path: .
    
    - name: Create environment file
      run: |
        cat > .env.production << EOF
        NODE_ENV=production
        MONGODB_URI=mongodb://admin:securepassword@mongodb:27017/irielle?authSource=admin
        AI_BACKEND_URL=http://ai-backend:8000
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL=https://dev.meziani.org
        NEXT_PUBLIC_APP_URL=https://dev.meziani.org
        EOF
    
    - name: Graceful service shutdown with SSL preservation
      run: |
        echo "🛑 Gracefully stopping and removing services..."
        
        # Stop and remove application services but keep nginx and ollama
        docker-compose stop clair-frontend lucide-analytics ai-backend || true
        docker-compose rm -f clair-frontend lucide-analytics ai-backend || true
        
        echo "🔒 Preserving SSL certificates, nginx, and ollama..."
        # Keep nginx running to show maintenance mode
        # Keep ollama running to preserve models
        
        echo "🗄️ Stopping and removing database services for reset..."
        docker-compose stop mongodb chromadb || true
        docker-compose rm -f mongodb chromadb || true
        
        echo "⚠️  Removing database volumes for fresh reset (DEV SERVER)..."
        docker volume rm clair_mongodb_data 2>/dev/null || true
        docker volume rm clair_chromadb_data 2>/dev/null || true
        
        echo "🧹 Force cleanup any containers using ports 3000, 3001, 8001..."
        # Kill any processes using these ports
        sudo lsof -ti:3000 | xargs -r sudo kill -9 || true
        sudo lsof -ti:3001 | xargs -r sudo kill -9 || true
        sudo lsof -ti:8001 | xargs -r sudo kill -9 || true
        
        # Remove any containers that might be using these ports
        docker ps -a --filter "expose=3000" --format "{{.ID}}" | xargs -r docker rm -f || true
        docker ps -a --filter "expose=3001" --format "{{.ID}}" | xargs -r docker rm -f || true
        docker ps -a --filter "expose=8001" --format "{{.ID}}" | xargs -r docker rm -f || true
        
        echo "🧹 Cleaning unused Docker resources..."
        docker system prune -f || true
    
    - name: Build and start database services
      run: |
        echo "🔨 Building Docker images with cached builds..."
        # Verify build artifacts are available
        if [ -d "clair-app/.next" ]; then
          echo "✅ Using cached CLAIR build ($(du -sh clair-app/.next | cut -f1))"
        else
          echo "❌ CLAIR build not found, this should not happen"
          exit 1
        fi
        
        if [ -d "lucide-analytics/.next" ]; then
          echo "✅ Using cached LUCIDE build ($(du -sh lucide-analytics/.next | cut -f1))"
        else
          echo "❌ LUCIDE build not found, this should not happen"
          exit 1
        fi
        
        # Build infrastructure services first (without cache for fresh deployment)
        echo "🏗️  Building infrastructure services..."
        docker-compose build --no-cache mongodb chromadb ai-backend nginx ollama certbot
        
        # Build Next.js apps with pre-built artifacts (much faster)
        echo "⚡ Building Next.js containers with cached builds..."
        docker-compose build clair-frontend lucide-analytics
        
        echo "✅ All Docker images built successfully with cached Next.js builds"
        
        # Show build performance summary
        echo ""
        echo "=== ⚡ Build Performance Summary ==="
        echo "📊 Next.js builds reused from test phase - significantly faster deployment!"
        echo "📊 CLAIR build size: $(du -sh clair-app/.next | cut -f1)"
        echo "📊 LUCIDE build size: $(du -sh lucide-analytics/.next | cut -f1)"
        echo "📊 Infrastructure services rebuilt for fresh deployment"
        echo "================================="
        echo ""
        
        echo "🗄️  Starting database services..."
        docker-compose up -d mongodb chromadb
        
        echo "🤖 Ensuring ollama is running..."
        # Start ollama if not already running (preserve existing models)
        if ! docker ps --format "table {{.Names}}" | grep -q "irielle-ollama"; then
          docker-compose up -d ollama
        fi
        
    - name: Wait for MongoDB and seed database
      run: |
        echo "⏳ Waiting for MongoDB to be ready..."
        sleep 15
        
        # Verify MongoDB is responding with timeout
        timeout=60
        while [ $timeout -gt 0 ]; do
          if docker exec irielle-mongodb mongosh --quiet -u admin -p securepassword --authenticationDatabase admin --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
            echo "✅ MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ MongoDB failed to start in time"
          docker-compose logs mongodb
          exit 1
        fi
        
        # Seed the database with fresh data
        echo "🌱 Seeding database with fresh demo data..."
        docker exec irielle-mongodb mongosh --quiet /docker-entrypoint-initdb.d/02-seed-data.js
        echo "✅ Database seeded successfully with reset credentials"
    
    - name: Configure SSL certificates automatically
      run: |
        echo "🔐 Configuring SSL certificates..."
        
        # Make scripts executable
        chmod +x clair-app/scripts/*.sh 2>/dev/null || true
        
        # Ensure certbot volumes exist
        docker volume create clair_certbot_data 2>/dev/null || true
        docker volume create clair_certbot_www 2>/dev/null || true
        
        # Start with HTTP-only configuration, then switch to SSL
        echo "🌐 Starting with HTTP-only configuration for certificate generation"
        
        # Ensure HTTP-only config is active initially
        if [ -f "nginx/conf.d/irielle-ssl.conf" ]; then
          mv nginx/conf.d/irielle-ssl.conf nginx/conf.d/irielle-ssl.conf.disabled
        fi
        if [ -f "nginx/conf.d/irielle-http-only.conf.disabled" ]; then
          mv nginx/conf.d/irielle-http-only.conf.disabled nginx/conf.d/irielle-http-only.conf
        fi
        
        # Check if SSL certificates exist
        if docker run --rm -v clair_certbot_data:/etc/letsencrypt alpine ls -la /etc/letsencrypt/live/dev.meziani.org/fullchain.pem 2>/dev/null; then
          echo "🔒 SSL certificates found"
          SSL_EXISTS=true
        else
          echo "🔐 No SSL certificates found, will generate them"
          SSL_EXISTS=false
        fi
        echo "SSL_EXISTS=$SSL_EXISTS" >> $GITHUB_ENV
        
    - name: Start application services
      run: |
        echo "🔍 Final port check before starting services..."
        netstat -tulpn | grep ":300[01]" || echo "Ports 3000/3001 are free"
        
        echo "🚀 Starting application services with pre-built images..."
        # Force remove any existing containers with same names
        docker rm -f irielle-clair-frontend irielle-lucide-analytics irielle-ai-backend 2>/dev/null || true
        
        # Start services individually to catch any port conflicts (no rebuild needed)
        echo "Starting CLAIR frontend with cached build..."
        docker-compose up -d clair-frontend
        sleep 10
        
        echo "Starting LUCIDE analytics with cached build..."
        docker-compose up -d lucide-analytics
        sleep 10
        
        echo "Starting AI backend..."
        docker-compose up -d ai-backend
        sleep 10
        
        echo "⏳ Waiting for application services to be ready..."
        sleep 20
        
        # Restart nginx to pick up new services (preserves SSL)
        echo "🌐 Restarting Nginx to connect to new services..."
        docker-compose restart nginx
        
        echo "⏳ Waiting for final services..."
        sleep 10
        
    - name: Generate SSL certificates and configure HTTPS
      run: |
        echo "🔐 Generating SSL certificates and configuring HTTPS..."
        
        # Wait for nginx to be ready
        echo "⏳ Waiting for nginx to be ready..."
        sleep 15
        
        # Test HTTP access first
        echo "🌐 Testing HTTP access..."
        if ! curl -f http://dev.meziani.org >/dev/null 2>&1; then
          echo "❌ HTTP access not working, checking nginx logs..."
          docker-compose logs nginx
          exit 1
        fi
        echo "✅ HTTP access working"
        
        # Generate SSL certificates if they don't exist
        if [ "$SSL_EXISTS" == "false" ]; then
          echo "🚀 Generating SSL certificates..."
          
          # Generate certificate for both main domain and subdomain
          docker-compose run --rm certbot certonly \
            --webroot \
            --webroot-path=/var/www/certbot \
            --email support@meziani.org \
            --agree-tos \
            --no-eff-email \
            --force-renewal \
            -d dev.meziani.org \
            -d lucide.dev.meziani.org
          
          if [ $? -eq 0 ]; then
            echo "✅ SSL certificates generated successfully"
            SSL_EXISTS=true
          else
            echo "❌ SSL certificate generation failed"
            exit 1
          fi
        fi
        
        # Switch to SSL configuration
        if [ "$SSL_EXISTS" == "true" ]; then
          echo "🔄 Switching to SSL configuration..."
          
          # Disable HTTP-only config
          if [ -f "nginx/conf.d/irielle-http-only.conf" ]; then
            mv nginx/conf.d/irielle-http-only.conf nginx/conf.d/irielle-http-only.conf.disabled
          fi
          
          # Enable SSL config
          if [ -f "nginx/conf.d/irielle-ssl.conf.disabled" ]; then
            mv nginx/conf.d/irielle-ssl.conf.disabled nginx/conf.d/irielle-ssl.conf
          fi
          
          # Restart nginx with SSL configuration
          echo "🔄 Restarting nginx with SSL configuration..."
          docker-compose restart nginx
          sleep 20
          
          # Test HTTPS access
          echo "🔍 Testing HTTPS access..."
          for i in {1..5}; do
            if curl -f -k https://dev.meziani.org >/dev/null 2>&1; then
              echo "✅ HTTPS is working correctly!"
              echo "SSL_WORKING=true" >> $GITHUB_ENV
              break
            else
              echo "⏳ HTTPS test attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          if [ "$SSL_WORKING" != "true" ]; then
            echo "❌ HTTPS still not working after 5 attempts"
            echo "Checking nginx logs..."
            docker-compose logs nginx
            echo "SSL_WORKING=false" >> $GITHUB_ENV
          fi
        else
          echo "SSL_WORKING=false" >> $GITHUB_ENV
        fi
        
    - name: Initialize Ollama model
      run: |
        echo "🤖 Checking Ollama AI model..."
        sleep 10
        # Check if model already exists, only pull if missing
        if ! docker exec irielle-ollama ollama list | grep -q "gemma3:4b"; then
          echo "Model not found, pulling gemma3:4b..."
          docker exec irielle-ollama ollama pull gemma3:4b || echo "Model pull failed, will retry later"
        else
          echo "Model gemma3:4b already exists, skipping pull"
        fi
        
    - name: Verify deployment and show status
      run: |
        echo "🔍 Verifying deployment..."
        sleep 10
        
        # Show service status
        echo ""
        echo "=== 📊 Container Status ==="
        docker-compose ps
        
        echo ""
        echo "=== 📋 Service Health Check ==="
        
        # Test MongoDB
        if docker exec irielle-mongodb mongosh --quiet -u admin -p securepassword --authenticationDatabase admin --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
          echo "✅ MongoDB: Running"
        else
          echo "❌ MongoDB: Failed"
        fi
        
        # Test CLAIR Application
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "✅ CLAIR Application: Running and responding"
            break
          fi
          echo "⏳ Waiting for CLAIR application... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ CLAIR Application failed to respond in time"
          echo "=== CLAIR Application Logs ==="
          docker-compose logs --tail=50 clair-frontend
          exit 1
        fi
        
        # Test LUCIDE Analytics
        timeout=60
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:3001 >/dev/null 2>&1; then
            echo "✅ LUCIDE Analytics: Running and responding"
            break
          fi
          echo "⏳ Waiting for LUCIDE analytics... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ LUCIDE Analytics failed to respond in time"
          echo "=== LUCIDE Analytics Logs ==="
          docker-compose logs --tail=50 lucide-analytics
          # Don't exit here, analytics is not critical for main app
        fi
        
        # Check and fix Nginx if needed
        if ! docker ps | grep irielle-nginx | grep -q "Up"; then
          echo "⚠️  Nginx not running properly, attempting restart..."
          docker-compose restart nginx
          sleep 5
        fi
        
        # Test AI Backend
        if curl -f http://localhost:8001/health >/dev/null 2>&1; then
          echo "✅ AI Backend: Running"
        else
          echo "⚠️  AI Backend: Not responding (may still be starting)"
        fi
        
        echo ""
        echo "🎉 ============================================="
        echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "🎉 ============================================="
        echo ""
        echo "🔐 LOGIN CREDENTIALS (FRESH RESET):"
        echo "   👑 Admin PIN: 1234"
        echo "   👥 Staff PIN: 5678"
        echo ""
        echo "🌐 ACCESS URLS:"
        if [ "$SSL_WORKING" == "true" ]; then
          echo "   🏥 CLAIR Healthcare: https://dev.meziani.org (SSL ENABLED ✅)"
          echo "   📊 LUCIDE Analytics: https://lucide.dev.meziani.org (SSL ENABLED ✅)"
          echo "   🔗 Fallback CLAIR: http://89.116.170.202:3000"
          echo "   🔗 Fallback LUCIDE: http://89.116.170.202:3001"
        else
          echo "   ❌ CLAIR Healthcare: https://dev.meziani.org (SSL FAILED)"
          echo "   ❌ LUCIDE Analytics: https://lucide.dev.meziani.org (SSL FAILED)"
          echo "   🔗 Fallback CLAIR: http://89.116.170.202:3000"
          echo "   🔗 Fallback LUCIDE: http://89.116.170.202:3001"
        fi
        echo "   🏠 Local CLAIR: http://localhost:3000"
        echo "   🏠 Local LUCIDE: http://localhost:3001"
        echo ""
        echo "📊 FRESH DATA AVAILABLE:"
        echo "   👤 5 Users (1 admin, 4 staff)"
        echo "   🏥 5 Patients with complete medical records"
        echo "   📋 3 Daily reports"
        echo "   💬 4 Team communications"
        echo "   📈 Bristol tracking entries"
        echo "   📊 Analytics dashboard with visitor tracking"
        echo ""
        echo "⚠️  Database reset completed - all data is fresh for demo!"
        echo "============================================="
        
    - name: Final restart
      run: |
        echo "🔄 Final restart to ensure everything is running smoothly..."
        docker-compose restart clair-frontend lucide-analytics nginx