name: Deploy to Dev Server with DB Reset

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Build application
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        AI_BACKEND_URL: http://localhost:8001
      run: npm run build

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Clean workspace
      run: |
        rm -rf .git || true
        rm -rf * || true
        rm -rf .[!.]* || true
        git config --global --add safe.directory ${{ github.workspace }}
    
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 1
    
    - name: Create environment file
      run: |
        cat > .env.production << EOF
        NODE_ENV=production
        MONGODB_URI=mongodb://admin:securepassword@mongodb:27017/irielle?authSource=admin
        AI_BACKEND_URL=http://ai-backend:8000
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL=http://89.116.170.202:3000
        EOF
    
    - name: Stop existing services and reset database (DEV ONLY)
      run: |
        echo "🛑 Stopping existing services..."
        docker-compose down --volumes --remove-orphans || true
        
        echo "⚠️  Removing database volumes for fresh reset (DEV SERVER)..."
        docker volume rm irielle-platform_mongodb_data 2>/dev/null || true
        docker volume rm irielle-platform_chromadb_data 2>/dev/null || true
        
        echo "🧹 Cleaning Docker system..."
        docker system prune -f || true
    
    - name: Build and start MongoDB first
      run: |
        echo "🔨 Building fresh Docker images..."
        docker-compose build --no-cache
        
        echo "🗄️  Starting MongoDB service..."
        docker-compose up -d mongodb
        
    - name: Wait for MongoDB and seed database
      run: |
        echo "⏳ Waiting for MongoDB to be ready..."
        sleep 15
        
        # Verify MongoDB is responding with timeout
        timeout=60
        while [ $timeout -gt 0 ]; do
          if docker exec irielle-mongodb mongosh --quiet --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
            echo "✅ MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ MongoDB failed to start in time"
          docker-compose logs mongodb
          exit 1
        fi
        
        # Seed the database with fresh data
        echo "🌱 Seeding database with fresh demo data..."
        docker exec irielle-mongodb mongosh --quiet /docker-entrypoint-initdb.d/02-seed-data.js
        echo "✅ Database seeded successfully with reset credentials"
    
    - name: Start all other services
      run: |
        echo "🚀 Starting all services..."
        docker-compose up -d --build
        
        echo "⏳ Waiting for all services to be ready..."
        sleep 30
        
    - name: Initialize Ollama model
      run: |
        echo "🤖 Initializing Ollama AI model..."
        sleep 10
        docker exec irielle-ollama ollama pull gemma3:4b || echo "Model pull failed, will retry later"
        
    - name: Verify deployment and show status
      run: |
        echo "🔍 Verifying deployment..."
        sleep 10
        
        # Show service status
        echo ""
        echo "=== 📊 Container Status ==="
        docker-compose ps
        
        echo ""
        echo "=== 📋 Service Health Check ==="
        
        # Test MongoDB
        if docker exec irielle-mongodb mongosh --quiet --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
          echo "✅ MongoDB: Running"
        else
          echo "❌ MongoDB: Failed"
        fi
        
        # Test Application
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "✅ Application: Running and responding"
            break
          fi
          echo "⏳ Waiting for application... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ Application failed to respond in time"
          echo "=== Application Logs ==="
          docker-compose logs --tail=50 app
          exit 1
        fi
        
        # Test AI Backend
        if curl -f http://localhost:8001/health >/dev/null 2>&1; then
          echo "✅ AI Backend: Running"
        else
          echo "⚠️  AI Backend: Not responding (may still be starting)"
        fi
        
        echo ""
        echo "🎉 ============================================="
        echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "🎉 ============================================="
        echo ""
        echo "🔐 LOGIN CREDENTIALS (FRESH RESET):"
        echo "   👑 Admin PIN: 1234"
        echo "   👥 Staff PIN: 5678"
        echo ""
        echo "🌐 ACCESS URLS:"
        echo "   🔗 Production: http://89.116.170.202:3000"
        echo "   🏠 Local: http://localhost:3000"
        echo ""
        echo "📊 FRESH DATA AVAILABLE:"
        echo "   👤 5 Users (1 admin, 4 staff)"
        echo "   🏥 5 Patients with complete medical records"
        echo "   📋 3 Daily reports"
        echo "   💬 4 Team communications"
        echo "   📈 Bristol tracking entries"
        echo ""
        echo "⚠️  Database reset completed - all data is fresh for demo!"
        echo "============================================="