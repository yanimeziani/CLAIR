name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Build application
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        NEXTAUTH_SECRET: test-secret-for-build
        NEXTAUTH_URL: http://localhost:3000
      run: npm run build

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Clean workspace
      run: |
        rm -rf .git || true
        rm -rf * || true
        rm -rf .[!.]* || true
        git config --global --add safe.directory ${{ github.workspace }}
    
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 1
    
    - name: Create environment file
      run: |
        cat > .env.production << EOF
        NODE_ENV=production
        MONGODB_URI=mongodb://admin:securepassword@mongodb:27017/irielle?authSource=admin
        AI_BACKEND_URL=http://ai-backend:8000
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL=https://dev.meziani.org
        EOF
    
    - name: Stop existing containers
      run: docker compose down || true
    
    - name: Remove old images
      run: docker system prune -f || true
    
    - name: Start services without SSL first
      run: |
        # Backup current configs and set up for certificate generation
        cp nginx/conf.d/irielle.conf nginx/conf.d/irielle.conf.backup || true
        cp nginx/conf.d/irielle-ssl.conf nginx/conf.d/irielle-ssl.conf.backup || true
        cp nginx/conf.d/irielle-init.conf nginx/conf.d/irielle.conf
        docker compose up -d --build mongodb chromadb ollama frontend nginx
        
    - name: Initialize Ollama model
      run: |
        echo "Waiting for Ollama to start..."
        sleep 30
        echo "Pulling gemma3:4b model..."
        docker exec irielle-ollama ollama pull gemma3:4b || echo "Model pull failed, will retry"
        sleep 10
    
    - name: Wait for services and get SSL certificate
      run: |
        echo "Waiting for services to start..."
        sleep 30
        
        # Check if nginx is responding on port 80
        for i in {1..10}; do
          if curl -f http://localhost/.well-known/acme-challenge/healthcheck 2>/dev/null || curl -f http://localhost 2>/dev/null; then
            echo "Nginx is responding, proceeding with certificate generation..."
            break
          fi
          echo "Waiting for nginx to respond... (attempt $i/10)"
          sleep 10
        done
        
        # Generate certificate
        echo "Requesting SSL certificate..."
        if docker compose run --rm certbot; then
          echo "✅ SSL certificate generated successfully"
        else
          echo "❌ SSL certificate generation failed, continuing with HTTP only"
        fi
    
    - name: Switch to SSL configuration
      run: |
        # Check if certificate exists and switch to SSL config
        if docker exec irielle-nginx test -f /etc/letsencrypt/live/dev.meziani.org/fullchain.pem; then
          echo "✅ Certificate found, switching to SSL configuration..."
          
          # Replace current config with SSL version
          cp nginx/conf.d/irielle-ssl.conf nginx/conf.d/irielle.conf
          
          # Test nginx config before restarting
          if docker exec irielle-nginx nginx -t; then
            echo "✅ Nginx config test passed, restarting..."
            docker compose restart nginx
            echo "✅ Switched to HTTPS successfully"
          else
            echo "❌ Nginx config test failed, reverting to HTTP"
            cp nginx/conf.d/irielle-init.conf nginx/conf.d/irielle.conf
            docker compose restart nginx
          fi
        else
          echo "⚠️ Certificate not found, continuing with HTTP only..."
          echo "Check DNS settings and firewall if certificate generation failed"
        fi
    
    - name: Start all services including AI backend
      run: |
        docker compose up -d --build ai-backend
        echo "Waiting for AI backend to start..."
        sleep 20
    
    - name: Verify deployment
      run: |
        echo "Waiting for final startup..."
        sleep 20
        
        # Show logs for debugging
        echo "=== Container Status ==="
        docker compose ps
        echo "=== Recent Logs ==="
        docker compose logs --tail=20
        
        # Test deployment
        echo "=== Testing Deployment ==="
        if curl -f http://localhost 2>/dev/null; then
          echo "✅ HTTP endpoint is working"
        else
          echo "❌ HTTP endpoint failed"
        fi
        
        if curl -f -k https://dev.meziani.org 2>/dev/null; then
          echo "✅ HTTPS endpoint is working"
        elif curl -f http://dev.meziani.org 2>/dev/null; then
          echo "✅ HTTP redirect is working"
        else
          echo "⚠️ External domain test failed (might be DNS/firewall)"
        fi
        
        # Ensure at least local access works
        curl -f http://localhost || exit 1
        echo "🎉 Deployment successful!"