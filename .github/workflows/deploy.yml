name: Deploy CLAIR Healthcare System

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Setup workspace for self-hosted runner
      run: |
        echo "üèóÔ∏è  Setting up workspace for self-hosted runner..."
        
        # Define workspace directory
        WORKSPACE_DIR="/home/runner/actions-runner/_work/CLAIR/CLAIR"
        
        # Create workspace directory structure if it doesn't exist
        mkdir -p "$(dirname "$WORKSPACE_DIR")"
        mkdir -p "$WORKSPACE_DIR"
        
        # Set proper ownership and permissions
        sudo chown -R runner:runner /home/runner/actions-runner/_work/ 2>/dev/null || true
        
        # Navigate to workspace
        cd "$WORKSPACE_DIR"
        
        # Clean up any existing files
        rm -rf ./* 2>/dev/null || true
        rm -rf ./.* 2>/dev/null || true
        
        # Configure git for this workspace
        git config --global --add safe.directory "$WORKSPACE_DIR"
        git config --global user.email "runner@srv723879.hstgr.cloud"
        git config --global user.name "GitHub Actions Runner"
        
        echo "‚úÖ Workspace setup completed: $WORKSPACE_DIR"
    
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 1
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          clair-app/package-lock.json
    
    - name: Install and build CLAIR application
      run: |
        echo "üì¶ Installing CLAIR dependencies..."
        cd clair-app
        npm ci
        
        echo "üîç Running linter..."
        npm run lint || true
        
        echo "üî® Building CLAIR application..."
        npm run build
        
        echo "‚úÖ CLAIR build completed successfully"
        cd ..
    
    - name: Create environment file
      run: |
        cat > .env.production << EOF
        NODE_ENV=production
        MONGODB_URI=mongodb://admin:securepassword@mongodb:27017/clair?authSource=admin
        AI_BACKEND_URL=http://ai-backend:8000
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL=https://dev.meziani.org
        NEXT_PUBLIC_APP_URL=https://dev.meziani.org
        EOF
    
    - name: Graceful service shutdown with SSL preservation
      run: |
        echo "üõë Gracefully stopping and removing services..."
        
        # Ensure we're in the right directory
        cd ${{ github.workspace }}
        
        # Check if docker-compose.yml exists
        if [ ! -f "docker-compose.yml" ]; then
          echo "‚ùå docker-compose.yml not found in workspace"
          exit 1
        fi
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
          echo "üì¶ Installing Docker..."
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker runner
        fi
        
        # Install Docker Compose if not present
        if ! command -v docker-compose &> /dev/null; then
          echo "üì¶ Installing Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # Stop and remove application services but keep nginx and ollama
        docker-compose stop clair-frontend ai-backend || true
        docker-compose rm -f clair-frontend ai-backend || true
        
        echo "üîí Preserving SSL certificates, nginx, and ollama..."
        # Keep nginx running to show maintenance mode
        # Keep ollama running to preserve models
        
        echo "üóÑÔ∏è Stopping and removing database services for reset..."
        docker-compose stop mongodb chromadb || true
        docker-compose rm -f mongodb chromadb || true
        
        echo "‚ö†Ô∏è  Removing database volumes for fresh reset (DEV SERVER)..."
        docker volume rm clair_mongodb_data 2>/dev/null || true
        docker volume rm clair_chromadb_data 2>/dev/null || true
        
        echo "üßπ Force cleanup any containers using ports 3000, 3001, 8001..."
        # Kill any processes using these ports
        sudo lsof -ti:3000 | xargs -r sudo kill -9 2>/dev/null || true
        sudo lsof -ti:3001 | xargs -r sudo kill -9 2>/dev/null || true
        sudo lsof -ti:8001 | xargs -r sudo kill -9 2>/dev/null || true
        
        # Remove any containers that might be using these ports
        docker ps -a --filter "expose=3000" --format "{{.ID}}" | xargs -r docker rm -f || true
        docker ps -a --filter "expose=3001" --format "{{.ID}}" | xargs -r docker rm -f || true
        docker ps -a --filter "expose=8001" --format "{{.ID}}" | xargs -r docker rm -f || true
        
        echo "üßπ Cleaning unused Docker resources..."
        docker system prune -f || true
    
    - name: Build and start database services
      run: |
        echo "üî® Building Docker images with fresh builds..."
        
        # Build infrastructure services first (without cache for fresh deployment)
        echo "üèóÔ∏è  Building infrastructure services..."
        docker-compose build --no-cache mongodb chromadb ai-backend nginx ollama certbot
        
        # Build Next.js apps with available builds
        echo "‚ö° Building Next.js containers with fresh builds..."
        docker-compose build clair-frontend
        
        echo "‚úÖ All Docker images built successfully"
        
        echo "üóÑÔ∏è  Starting database services..."
        docker-compose up -d mongodb chromadb
        
        echo "ü§ñ Ensuring ollama is running..."
        # Start ollama if not already running (preserve existing models)
        if ! docker ps --format "table {{.Names}}" | grep -q "clair-ollama"; then
          docker-compose up -d ollama
        fi
        
    - name: Wait for MongoDB and seed database
      run: |
        echo "‚è≥ Waiting for MongoDB to be ready..."
        sleep 15
        
        # Verify MongoDB is responding with timeout
        timeout=60
        while [ $timeout -gt 0 ]; do
          if docker exec clair-mongodb mongosh --quiet -u admin -p securepassword --authenticationDatabase admin --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
            echo "‚úÖ MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "‚ùå MongoDB failed to start in time"
          docker-compose logs mongodb
          exit 1
        fi
        
        # Seed the database with fresh data
        echo "üå± Seeding database with fresh demo data..."
        docker exec clair-mongodb mongosh --quiet /docker-entrypoint-initdb.d/02-seed-data.js
        echo "‚úÖ Database seeded successfully with reset credentials"
    
    - name: Configure SSL certificates automatically
      run: |
        echo "üîê Configuring SSL certificates..."
        
        # Make scripts executable
        chmod +x clair-app/scripts/*.sh 2>/dev/null || true
        
        # Ensure certbot volumes exist
        docker volume create clair_certbot_data 2>/dev/null || true
        docker volume create clair_certbot_www 2>/dev/null || true
        
        # Start with HTTP-only configuration, then switch to SSL
        echo "üåê Starting with HTTP-only configuration for certificate generation"
        
        # Ensure HTTP-only config is active initially
        if [ -f "clair-app/nginx/conf.d/irielle-ssl.conf" ]; then
          mv clair-app/nginx/conf.d/irielle-ssl.conf clair-app/nginx/conf.d/irielle-ssl.conf.disabled
        fi
        if [ -f "clair-app/nginx/conf.d/irielle-http-only.conf.disabled" ]; then
          mv clair-app/nginx/conf.d/irielle-http-only.conf.disabled clair-app/nginx/conf.d/irielle-http-only.conf
        fi
        
        # Check if SSL certificates exist
        if docker run --rm -v clair_certbot_data:/etc/letsencrypt alpine ls -la /etc/letsencrypt/live/dev.meziani.org/fullchain.pem 2>/dev/null; then
          echo "üîí SSL certificates found"
          SSL_EXISTS=true
        else
          echo "üîê No SSL certificates found, will generate them"
          SSL_EXISTS=false
        fi
        echo "SSL_EXISTS=$SSL_EXISTS" >> $GITHUB_ENV
        
    - name: Start application services
      run: |
        echo "üîç Final port check before starting services..."
        netstat -tulpn | grep ":300[01]" || echo "Ports 3000/3001 are free"
        
        echo "üöÄ Starting application services with pre-built images..."
        # Force remove any existing containers with same names
        docker rm -f clair-frontend clair-ai-backend clair-nginx 2>/dev/null || true
        
        # Start services individually to catch any port conflicts (no rebuild needed)
        echo "Starting CLAIR frontend with fresh build..."
        docker-compose up -d clair-frontend
        sleep 15
        
        echo "Starting AI backend..."
        docker-compose up -d ai-backend
        sleep 15
        
        echo "‚è≥ Waiting for application services to be ready..."
        
        # Wait for frontend to be responsive
        timeout=60
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "‚úÖ CLAIR Frontend is ready"
            break
          fi
          echo "‚è≥ Waiting for frontend... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "‚ùå Frontend failed to start"
          docker-compose logs clair-frontend
          exit 1
        fi
        
        # Now start nginx since frontend is ready
        echo "üåê Starting Nginx now that services are ready..."
        docker-compose up -d nginx
        
        echo "‚è≥ Waiting for nginx to start..."
        sleep 10
        
    - name: Generate SSL certificates and configure HTTPS
      run: |
        echo "üîê Generating SSL certificates and configuring HTTPS..."
        
        # Wait for nginx to be ready
        echo "‚è≥ Waiting for nginx to be ready..."
        sleep 15
        
        # Test HTTP access first
        echo "üåê Testing HTTP access..."
        if ! curl -f http://dev.meziani.org >/dev/null 2>&1; then
          echo "‚ùå HTTP access not working, checking nginx logs..."
          docker-compose logs nginx
          exit 1
        fi
        echo "‚úÖ HTTP access working"
        
        # Generate SSL certificates if they don't exist
        if [ "$SSL_EXISTS" == "false" ]; then
          echo "üöÄ Generating SSL certificates..."
          
          # Generate certificate for main domain
          docker-compose run --rm certbot certonly \
            --webroot \
            --webroot-path=/var/www/certbot \
            --email support@meziani.org \
            --agree-tos \
            --no-eff-email \
            --force-renewal \
            -d dev.meziani.org
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ SSL certificates generated successfully"
            SSL_EXISTS=true
          else
            echo "‚ùå SSL certificate generation failed"
            exit 1
          fi
        fi
        
        # Switch to SSL configuration
        if [ "$SSL_EXISTS" == "true" ]; then
          echo "üîÑ Switching to SSL configuration..."
          
          # Disable HTTP-only config
          if [ -f "clair-app/nginx/conf.d/irielle-http-only.conf" ]; then
            mv clair-app/nginx/conf.d/irielle-http-only.conf clair-app/nginx/conf.d/irielle-http-only.conf.disabled
          fi
          
          # Enable SSL config
          if [ -f "clair-app/nginx/conf.d/irielle-ssl.conf.disabled" ]; then
            mv clair-app/nginx/conf.d/irielle-ssl.conf.disabled clair-app/nginx/conf.d/irielle-ssl.conf
          fi
          
          # Verify SSL certificate includes subdomain
          echo "üîç Verifying SSL certificate includes both domains..."
          docker run --rm -v clair_certbot_data:/etc/letsencrypt alpine \
            openssl x509 -in /etc/letsencrypt/live/dev.meziani.org/fullchain.pem -text -noout | grep -E "DNS:" || echo "Certificate domains check failed"
          
          # Restart nginx with SSL configuration
          echo "üîÑ Restarting nginx with SSL configuration..."
          docker-compose restart nginx
          sleep 20
          
          # Test HTTPS access for both domains
          echo "üîç Testing HTTPS access for dev.meziani.org..."
          MAIN_SSL_OK=false
          for i in {1..5}; do
            if curl -f -k https://dev.meziani.org >/dev/null 2>&1; then
              echo "‚úÖ dev.meziani.org HTTPS is working!"
              MAIN_SSL_OK=true
              break
            else
              echo "‚è≥ dev.meziani.org HTTPS test attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          if [ "$MAIN_SSL_OK" == "true" ]; then
            echo "SSL_WORKING=true" >> $GITHUB_ENV
          else
            echo "‚ùå SSL not working for domain"
            echo "Main domain SSL: $MAIN_SSL_OK"
            echo "Checking nginx logs..."
            docker-compose logs nginx
            echo "SSL_WORKING=false" >> $GITHUB_ENV
          fi
        else
          echo "SSL_WORKING=false" >> $GITHUB_ENV
        fi
        
    - name: Initialize Ollama model
      run: |
        echo "ü§ñ Checking Ollama AI model..."
        sleep 10
        # Check if model already exists, only pull if missing
        if ! docker exec clair-ollama ollama list | grep -q "gemma3:4b"; then
          echo "Model not found, pulling gemma3:4b..."
          docker exec clair-ollama ollama pull gemma3:4b || echo "Model pull failed, will retry later"
        else
          echo "Model gemma3:4b already exists, skipping pull"
        fi
        
    - name: Verify deployment and show status
      run: |
        echo "üîç Verifying deployment..."
        sleep 10
        
        # Show service status
        echo ""
        echo "=== üìä Container Status ==="
        docker-compose ps
        
        echo ""
        echo "=== üìã Service Health Check ==="
        
        # Test MongoDB
        if docker exec clair-mongodb mongosh --quiet -u admin -p securepassword --authenticationDatabase admin --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
          echo "‚úÖ MongoDB: Running"
        else
          echo "‚ùå MongoDB: Failed"
        fi
        
        # Test CLAIR Application
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "‚úÖ CLAIR Application: Running and responding"
            break
          fi
          echo "‚è≥ Waiting for CLAIR application... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "‚ùå CLAIR Application failed to respond in time"
          echo "=== CLAIR Application Logs ==="
          docker-compose logs --tail=50 clair-frontend
          exit 1
        fi
        
        
        # Check and fix Nginx if needed
        if ! docker ps | grep clair-nginx | grep -q "Up"; then
          echo "‚ö†Ô∏è  Nginx not running properly, attempting restart..."
          docker-compose restart nginx
          sleep 5
        fi
        
        # Test AI Backend
        if curl -f http://localhost:8001/health >/dev/null 2>&1; then
          echo "‚úÖ AI Backend: Running"
        else
          echo "‚ö†Ô∏è  AI Backend: Not responding (may still be starting)"
        fi
        
        echo ""
        echo "üéâ ============================================="
        echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "üéâ ============================================="
        echo ""
        echo "üîê LOGIN CREDENTIALS (FRESH RESET):"
        echo "   üëë Admin PIN: 1234"
        echo "   üë• Staff PIN: 5678"
        echo ""
        echo "üåê ACCESS URLS:"
        if [ "$SSL_WORKING" == "true" ]; then
          echo "   üè• CLAIR Healthcare: https://dev.meziani.org (SSL ENABLED ‚úÖ)"
          echo "   üîó Direct CLAIR: http://89.116.170.202:3000"
        else
          echo "   ‚ùå CLAIR Healthcare: https://dev.meziani.org (SSL FAILED)"
          echo "   üîó HTTP CLAIR: http://dev.meziani.org (if available)"
          echo "   üîó Direct CLAIR: http://89.116.170.202:3000"
        fi
        echo "   üè† Local CLAIR: http://localhost:3000"
        echo ""
        echo "üìä FRESH DATA AVAILABLE:"
        echo "   üë§ 5 Users (1 admin, 4 staff)"
        echo "   üè• 5 Patients with complete medical records"
        echo "   üìã 3 Daily reports"
        echo "   üí¨ 4 Team communications"
        echo "   üìà Bristol tracking entries"
        echo "   üìä Integrated analytics dashboard"
        echo ""
        echo "‚ö†Ô∏è  Database reset completed - all data is fresh for demo!"
        echo "============================================="
        
    - name: Final restart
      run: |
        echo "üîÑ Final restart to ensure everything is running smoothly..."
        docker-compose restart clair-frontend nginx