name: Deploy to Dev Server with DB Reset

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Build application
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        AI_BACKEND_URL: http://localhost:8001
      run: npm run build

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Clean workspace
      run: |
        rm -rf .git || true
        rm -rf * || true
        rm -rf .[!.]* || true
        git config --global --add safe.directory ${{ github.workspace }}
    
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 1
    
    - name: Create environment file
      run: |
        cat > .env.production << EOF
        NODE_ENV=production
        MONGODB_URI=mongodb://admin:securepassword@mongodb:27017/irielle?authSource=admin
        AI_BACKEND_URL=http://ai-backend:8000
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL=http://89.116.170.202:3000
        EOF
    
    - name: Enable maintenance mode
      run: |
        echo "🚧 Enabling maintenance mode..."
        echo "MAINTENANCE_MODE=true" >> .env.production
        
        # Create maintenance HTML file
        cat > ./nginx/maintenance.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Maintenance - IRIELLE</title>
            <meta charset="UTF-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; }
                .spinner { border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; width: 40px; height: 40px; animation: spin 2s linear infinite; margin: 20px auto; }
                @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🚧 Maintenance en cours</h1>
                <div class="spinner"></div>
                <p>IRIELLE est actuellement en maintenance pour améliorer votre expérience.</p>
                <p>Nous serons de retour dans quelques minutes.</p>
                <p><em>Merci pour votre patience.</em></p>
            </div>
        </body>
        </html>
        EOF
        
        # Apply maintenance mode to running containers first
        if docker ps --format "table {{.Names}}" | grep -q "irielle-frontend"; then
          echo "🔄 Applying maintenance mode to running frontend..."
          docker-compose restart frontend
          sleep 5
        fi
        
    - name: Graceful service shutdown with SSL preservation
      run: |
        echo "🛑 Gracefully stopping services..."
        
        # Stop application services but keep nginx and ollama
        docker-compose stop frontend ai-backend || true
        
        echo "🔒 Preserving SSL certificates, nginx, and ollama..."
        # Keep nginx running to show maintenance mode
        # Keep ollama running to preserve models
        
        echo "🗄️ Stopping database services for reset..."
        docker-compose stop mongodb chromadb || true
        
        echo "⚠️  Removing database volumes for fresh reset (DEV SERVER)..."
        docker volume rm irielle-platform_mongodb_data 2>/dev/null || true
        docker volume rm irielle-platform_chromadb_data 2>/dev/null || true
        
        echo "🧹 Cleaning unused Docker resources..."
        docker system prune -f || true
    
    - name: Build and start database services
      run: |
        echo "🔨 Building fresh Docker images..."
        docker-compose build --no-cache
        
        echo "🗄️  Starting database services..."
        docker-compose up -d mongodb chromadb
        
        echo "🤖 Ensuring ollama is running..."
        # Start ollama if not already running (preserve existing models)
        if ! docker ps --format "table {{.Names}}" | grep -q "irielle-ollama"; then
          docker-compose up -d ollama
        fi
        
    - name: Wait for MongoDB and seed database
      run: |
        echo "⏳ Waiting for MongoDB to be ready..."
        sleep 15
        
        # Verify MongoDB is responding with timeout
        timeout=60
        while [ $timeout -gt 0 ]; do
          if docker exec irielle-mongodb mongosh --quiet -u admin -p securepassword --authenticationDatabase admin --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
            echo "✅ MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ MongoDB failed to start in time"
          docker-compose logs mongodb
          exit 1
        fi
        
        # Seed the database with fresh data
        echo "🌱 Seeding database with fresh demo data..."
        docker exec irielle-mongodb mongosh --quiet /docker-entrypoint-initdb.d/02-seed-data.js
        echo "✅ Database seeded successfully with reset credentials"
    
    - name: Configure SSL certificates automatically
      run: |
        echo "🔐 Configuring SSL certificates..."
        
        # Make scripts executable
        chmod +x scripts/*.sh 2>/dev/null || true
        
        # Ensure certbot volumes exist
        docker volume create irielle-platform_certbot_data 2>/dev/null || true
        docker volume create irielle-platform_certbot_www 2>/dev/null || true
        
        # Check if SSL certificates exist
        if docker run --rm -v irielle-platform_certbot_data:/etc/letsencrypt alpine ls -la /etc/letsencrypt/live/dev.meziani.org/fullchain.pem 2>/dev/null; then
          echo "🔒 SSL certificates found, using HTTPS configuration"
          # Ensure SSL config is active
          if [ -f "nginx/conf.d/irielle-http-only.conf" ]; then
            mv nginx/conf.d/irielle-http-only.conf nginx/conf.d/irielle-http-only.conf.disabled
          fi
          if [ -f "nginx/conf.d/irielle-ssl.conf.disabled" ]; then
            mv nginx/conf.d/irielle-ssl.conf.disabled nginx/conf.d/irielle-ssl.conf
          fi
          SSL_EXISTS=true
        else
          echo "🌐 No SSL certificates found, will generate them"
          # Ensure HTTP-only config is active
          if [ -f "nginx/conf.d/irielle-ssl.conf" ]; then
            mv nginx/conf.d/irielle-ssl.conf nginx/conf.d/irielle-ssl.conf.disabled
          fi
          if [ -f "nginx/conf.d/irielle-http-only.conf.disabled" ]; then
            mv nginx/conf.d/irielle-http-only.conf.disabled nginx/conf.d/irielle-http-only.conf
          fi
          SSL_EXISTS=false
        fi
        echo "SSL_EXISTS=$SSL_EXISTS" >> $GITHUB_ENV
        
    - name: Start application services
      run: |
        echo "🚀 Starting application services..."
        docker-compose up -d --build frontend ai-backend
        
        echo "⏳ Waiting for application services to be ready..."
        sleep 20
        
        # Restart nginx to pick up new services (preserves SSL)
        echo "🌐 Restarting Nginx to connect to new services..."
        docker-compose restart nginx
        
        echo "⏳ Waiting for final services..."
        sleep 10
        
    - name: Generate SSL certificates automatically
      if: env.SSL_EXISTS == 'false'
      run: |
        echo "🔐 Generating SSL certificates automatically..."
        
        # Wait for nginx to be ready
        echo "⏳ Waiting for nginx to be ready..."
        sleep 15
        
        # Check if nginx is serving HTTP correctly
        if ! curl -f http://localhost/.well-known/acme-challenge/test 2>/dev/null; then
          echo "⚠️  Testing nginx accessibility..."
          docker-compose logs nginx
        fi
        
        # Generate certificates using certbot
        echo "🚀 Requesting SSL certificate from Let's Encrypt..."
        docker-compose run --rm certbot certonly \
          --webroot \
          --webroot-path=/var/www/certbot \
          --email support@meziani.org \
          --agree-tos \
          --no-eff-email \
          --keep-until-expiring \
          --domains dev.meziani.org || {
          echo "❌ SSL certificate generation failed"
          echo "Continuing with HTTP-only mode"
          exit 0
        }
        
        # If certificates were generated successfully, switch to SSL
        if docker run --rm -v irielle-platform_certbot_data:/etc/letsencrypt alpine ls -la /etc/letsencrypt/live/dev.meziani.org/fullchain.pem 2>/dev/null; then
          echo "✅ SSL certificates generated successfully!"
          
          # Switch to SSL configuration
          if [ -f "nginx/conf.d/irielle-http-only.conf" ]; then
            mv nginx/conf.d/irielle-http-only.conf nginx/conf.d/irielle-http-only.conf.disabled
          fi
          if [ -f "nginx/conf.d/irielle-ssl.conf.disabled" ]; then
            mv nginx/conf.d/irielle-ssl.conf.disabled nginx/conf.d/irielle-ssl.conf
          fi
          
          # Restart nginx with SSL
          echo "🔄 Restarting nginx with SSL configuration..."
          docker-compose restart nginx
          sleep 10
          
          # Test SSL
          echo "🔍 Testing SSL configuration..."
          if curl -f -k https://dev.meziani.org >/dev/null 2>&1; then
            echo "✅ SSL is working correctly!"
          else
            echo "⚠️  SSL test failed, but certificates exist"
          fi
        else
          echo "⚠️  Certificate generation completed but files not found"
        fi
        
    - name: Initialize Ollama model
      run: |
        echo "🤖 Checking Ollama AI model..."
        sleep 10
        # Check if model already exists, only pull if missing
        if ! docker exec irielle-ollama ollama list | grep -q "gemma3:4b"; then
          echo "Model not found, pulling gemma3:4b..."
          docker exec irielle-ollama ollama pull gemma3:4b || echo "Model pull failed, will retry later"
        else
          echo "Model gemma3:4b already exists, skipping pull"
        fi
        
    - name: Verify deployment and show status
      run: |
        echo "🔍 Verifying deployment..."
        sleep 10
        
        # Show service status
        echo ""
        echo "=== 📊 Container Status ==="
        docker-compose ps
        
        echo ""
        echo "=== 📋 Service Health Check ==="
        
        # Test MongoDB
        if docker exec irielle-mongodb mongosh --quiet -u admin -p securepassword --authenticationDatabase admin --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
          echo "✅ MongoDB: Running"
        else
          echo "❌ MongoDB: Failed"
        fi
        
        # Test Application
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "✅ Application: Running and responding"
            break
          fi
          echo "⏳ Waiting for application... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ Application failed to respond in time"
          echo "=== Application Logs ==="
          docker-compose logs --tail=50 frontend
          exit 1
        fi
        
        # Check and fix Nginx if needed
        if ! docker ps | grep irielle-nginx | grep -q "Up"; then
          echo "⚠️  Nginx not running properly, attempting restart..."
          docker-compose restart nginx
          sleep 5
        fi
        
        # Test AI Backend
        if curl -f http://localhost:8001/health >/dev/null 2>&1; then
          echo "✅ AI Backend: Running"
        else
          echo "⚠️  AI Backend: Not responding (may still be starting)"
        fi
        
        echo ""
        echo "🎉 ============================================="
        echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "🎉 ============================================="
        echo ""
        echo "🔐 LOGIN CREDENTIALS (FRESH RESET):"
        echo "   👑 Admin PIN: 1234"
        echo "   👥 Staff PIN: 5678"
        echo ""
        echo "🌐 ACCESS URLS:"
        # Check if SSL is working
        if curl -f -k https://dev.meziani.org >/dev/null 2>&1; then
          echo "   🔗 Production: https://dev.meziani.org (SSL enabled)"
          echo "   🔗 Fallback: http://89.116.170.202:3000"
        else
          echo "   🔗 Production: http://89.116.170.202:3000"
          echo "   ⚠️  SSL: Not configured (HTTP only)"
        fi
        echo "   🏠 Local: http://localhost:3000"
        echo ""
        echo "📊 FRESH DATA AVAILABLE:"
        echo "   👤 5 Users (1 admin, 4 staff)"
        echo "   🏥 5 Patients with complete medical records"
        echo "   📋 3 Daily reports"
        echo "   💬 4 Team communications"
        echo "   📈 Bristol tracking entries"
        echo ""
        echo "⚠️  Database reset completed - all data is fresh for demo!"
        echo "============================================="
        
    - name: Disable maintenance mode
      run: |
        echo "✅ Disabling maintenance mode..."
        sed -i 's/MAINTENANCE_MODE=true/MAINTENANCE_MODE=false/' .env.production
        
        # Remove maintenance marker file
        rm -f ./nginx/maintenance.html
        
        # Restart containers to apply new environment
        docker-compose restart frontend nginx